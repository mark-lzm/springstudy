<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--开启注解扫描-->
    <context:component-scan base-package="net.litchi"/>

    <!--Spring整合了拦截器模式  -> aop切面 -->
    <!--
        切面 Aspect
        切点 pointCut   连接点 jointPoint
        通知 advice
     -->

    <!--基于注解配置aop  开启自动代理-->
    <aop:aspectj-autoproxy/>

    <!--开启事务扫描-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*Tx"/>
<!--            <tx:method name="query*" propagation="SUPPORTS" isolation="READ_UNCOMMITTED" rollback-for="exception" no-rollback-for=""-->
            <tx:method name="insert*" propagation="REQUIRED" isolation="REPEATABLE_READ" rollback-for="exception" no-rollback-for=""/>
            <tx:method name="update*"/>
            <tx:method name="delete*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="txPc" expression="execution(* net.litchi..*.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPc"/>
    </aop:config>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
        <property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>





    <!--开启CGLIB实现代理  false为基于JDK代理   （是否存在父类，存在则JDK，不存在则CGLIB）-->
<!--    <aop:aspectj-autoproxy proxy-target-class="true"/>-->


<!--    <bean id="myAspect" class="net.litchi.spring.aop.aspect.MyAspect"/>-->

    <!--基于xml文件配置aop-->
  <!--  <aop:config>
        <aop:aspect ref="myAspect">
            <aop:pointcut id="pc"
                          expression="execution(* net.litchi..*.service.impl.*.*(..))"/>
            <aop:before method="before" pointcut-ref="pc"/>
            <aop:around method="around" pointcut-ref="pc"/>
            <aop:after-returning method="afterReturning" returning="result" pointcut-ref="pc"/>
            <aop:after-throwing method="afterThrowing" throwing="e" pointcut-ref="pc"/>
            <aop:after method="after" pointcut-ref="pc"/>
        </aop:aspect>
    </aop:config>-->




    <!--
    用来模拟web.xml
     <servlet>
         <servlet-name>indexServlet</servlet-name>
         <servlet-class>net.litchi.xxx.indexServlet</servlet-class>
      </servlet>
      <servlet-mapping>
         <servlet-name>indexServlet</servlet-name>
         <url>/index/*</url>
      </servlet-mapping>
    -->
    <!--
        IOC inverse of control 对象的创建，不再有new ，所有的组件交给Spring控制
        注册 mockServlet1 到容器中，并且起名为mockServlet1
        net.litchi.spring.mock.MockServlet1 全限定名
        newClass= Class.newInstance();
        类 实例/引用 对象
        User user =new User();
        scope :  prototype 原型 singleton 单例（默认）


         DI dependency inject 依赖注入
    -->
    <!-- <bean id="mockServlet1" class="net.litchi.spring.mock.MockServlet1"
           init-method="init" destroy-method="destroy">
         &lt;!&ndash;基于构造方法注入&ndash;&gt;
         <constructor-arg name="age" value="10"/>
         <constructor-arg name="name" value="test"/>
         <constructor-arg name="ids">
             <list>
                 <value>1</value>
                 <value>2</value>
                 <value>3</value>
             </list>
         </constructor-arg>
         <constructor-arg name="mockHttpServlet" ref="mockServlet2"/>
         <constructor-arg name="httpServletMap">
             <map>
                 &lt;!&ndash;关联外置bean&ndash;&gt;
                 <entry key="m1" value-ref="mockServlet2"/>
                 <entry key="m2" value-ref="mockServlet2"/>
                 <entry key="m3" value-ref="mockServlet2"/>
                 &lt;!&ndash;内置bean&ndash;&gt;
                 <entry key="dev88173">
                     <bean class="net.litchi.spring.mock.MockServlet2">

                     </bean>
                 </entry>
             </map>
         </constructor-arg>





         &lt;!&ndash;基于setter方法注入&ndash;&gt;
         <property name="age" value="10"/>
         <property name="name" value="zm"/>
         &lt;!&ndash;setter对象注入&ndash;&gt;
         <property name="mockHttpServlet" ref="mockServlet2">
             &lt;!&ndash;<bean class="net.litchi.spring.mock.MockServlet2"/>&ndash;&gt;
         </property>
         &lt;!&ndash;注入List集合&ndash;&gt;
         <property name="ids">
             <list>
                 &lt;!&ndash;<ref></ref>&ndash;&gt;
                 <value>1</value>
                 <value>2</value>
                 <value>3</value>
             </list>
         </property>
         &lt;!&ndash;注入Map集合&ndash;&gt;
         <property name="httpServletMap">
             <map>
                 &lt;!&ndash;关联外置bean&ndash;&gt;
                 <entry key="m1" value-ref="mockServlet2"/>
                 <entry key="m2" value-ref="mockServlet2"/>
                 <entry key="m3" value-ref="mockServlet2"/>
                 &lt;!&ndash;内置bean&ndash;&gt;
                 <entry key="dev88173">
                     <bean class="net.litchi.spring.mock.MockServlet2">

                     </bean>
                 </entry>
             </map>
         </property>
     </bean>

     &lt;!&ndash;   <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
            <property name="dataSource" value=""></property>
        </bean>

        <bean ></bean>&ndash;&gt;

     <bean id="mockServlet2" class="net.litchi.spring.mock.MockServlet2">

     </bean>


     <bean id="userDao" class="net.litchi.spring.ioc.dao.UserDao">

     </bean>

     <bean id="userServiceImpl" class="net.litchi.spring.ioc.service.impl.UserServiceImpl">
         <property name="userDao" ref="userDao"/>
     </bean>

     <bean id="userServiceImpl2" class="net.litchi.spring.ioc.service.impl.UserServiceImpl2">
         <property name="userDao" ref="userDao"/>
     </bean>

     <bean id="userServlet" class="net.litchi.spring.ioc.web.servlet.UserServlet">
         <property name="userService" ref="userServiceImpl2"/>
     </bean>

     -->

</beans>